{"ast":null,"code":"class ARButton {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement('button');\n    function showStartAR(/*device*/\n    ) {\n      if (sessionInit.domOverlay === undefined) {\n        const overlay = document.createElement('div');\n        overlay.style.display = 'none';\n        document.body.appendChild(overlay);\n        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        svg.setAttribute('width', 38);\n        svg.setAttribute('height', 38);\n        svg.style.position = 'absolute';\n        svg.style.right = '20px';\n        svg.style.top = '20px';\n        svg.addEventListener('click', function () {\n          currentSession.end();\n        });\n        overlay.appendChild(svg);\n        const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path.setAttribute('d', 'M 12,12 L 28,28 M 28,12 12,28');\n        path.setAttribute('stroke', '#fff');\n        path.setAttribute('stroke-width', 2);\n        svg.appendChild(path);\n        if (sessionInit.optionalFeatures === undefined) {\n          sessionInit.optionalFeatures = [];\n        }\n        sessionInit.optionalFeatures.push('dom-overlay');\n        sessionInit.domOverlay = {\n          root: overlay\n        };\n      }\n\n      //\n\n      let currentSession = null;\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n        renderer.xr.setReferenceSpaceType('local');\n        await renderer.xr.setSession(session);\n        button.textContent = 'STOP AR';\n        sessionInit.domOverlay.root.style.display = '';\n        currentSession = session;\n      }\n      function onSessionEnded(/*event*/\n      ) {\n        currentSession.removeEventListener('end', onSessionEnded);\n        button.textContent = 'START AR';\n        sessionInit.domOverlay.root.style.display = 'none';\n        currentSession = null;\n      }\n\n      //\n\n      button.style.display = '';\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n      button.textContent = 'START AR';\n      button.onmouseenter = function () {\n        button.style.opacity = '1.0';\n      };\n      button.onmouseleave = function () {\n        button.style.opacity = '0.5';\n      };\n      button.onclick = function () {\n        if (currentSession === null) {\n          navigator.xr.requestSession('immersive-ar', sessionInit).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n    function disableButton() {\n      button.style.display = '';\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n    function showARNotSupported() {\n      disableButton();\n      button.textContent = 'AR NOT SUPPORTED';\n    }\n    function showARNotAllowed(exception) {\n      disableButton();\n      console.warn('Exception when trying to call xr.isSessionSupported', exception);\n      button.textContent = 'AR NOT ALLOWED';\n    }\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n    if ('xr' in navigator) {\n      button.id = 'ARButton';\n      button.style.display = 'none';\n      stylizeElement(button);\n      navigator.xr.isSessionSupported('immersive-ar').then(function (supported) {\n        supported ? showStartAR() : showARNotSupported();\n      }).catch(showARNotAllowed);\n      return button;\n    } else {\n      const message = document.createElement('a');\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n      stylizeElement(message);\n      return message;\n    }\n  }\n}\nexport { ARButton };","map":null,"metadata":{},"sourceType":"module"}